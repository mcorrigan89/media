// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: photo.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const createPhoto = `-- name: CreatePhoto :one
INSERT INTO photo (bucket, asset_id, width, height, size, owner_id) 
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, bucket, asset_id, width, height, size, owner_id, created_at, updated_at, version
`

type CreatePhotoParams struct {
	Bucket  string     `json:"bucket"`
	AssetID string     `json:"asset_id"`
	Width   int32      `json:"width"`
	Height  int32      `json:"height"`
	Size    int32      `json:"size"`
	OwnerID *uuid.UUID `json:"owner_id"`
}

func (q *Queries) CreatePhoto(ctx context.Context, arg CreatePhotoParams) (Photo, error) {
	row := q.db.QueryRow(ctx, createPhoto,
		arg.Bucket,
		arg.AssetID,
		arg.Width,
		arg.Height,
		arg.Size,
		arg.OwnerID,
	)
	var i Photo
	err := row.Scan(
		&i.ID,
		&i.Bucket,
		&i.AssetID,
		&i.Width,
		&i.Height,
		&i.Size,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const getPhotoByID = `-- name: GetPhotoByID :one
SELECT photo.id, photo.bucket, photo.asset_id, photo.width, photo.height, photo.size, photo.owner_id, photo.created_at, photo.updated_at, photo.version FROM photo
WHERE photo.id = $1
`

type GetPhotoByIDRow struct {
	Photo Photo `json:"photo"`
}

func (q *Queries) GetPhotoByID(ctx context.Context, id uuid.UUID) (GetPhotoByIDRow, error) {
	row := q.db.QueryRow(ctx, getPhotoByID, id)
	var i GetPhotoByIDRow
	err := row.Scan(
		&i.Photo.ID,
		&i.Photo.Bucket,
		&i.Photo.AssetID,
		&i.Photo.Width,
		&i.Photo.Height,
		&i.Photo.Size,
		&i.Photo.OwnerID,
		&i.Photo.CreatedAt,
		&i.Photo.UpdatedAt,
		&i.Photo.Version,
	)
	return i, err
}
